@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
}

@model PaginaAnimeListMVC.ViewModels.UserProfileViewModel

@{
    ViewData["Title"] = $"{Model.User.UserName}'s Profile";
}

<style>
    /* Profile Section */
    .profile-header {
        background: linear-gradient(135deg, #4338ca, #6366f1);
        padding: 3rem 1.5rem;
        border-radius: 1rem;
        color: white;
        margin-bottom: 2rem;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    }

    /* Collections Section */
    .collection-tabs .nav-link {
        color: #4b5563;
        font-weight: 600;
        padding: 1rem 1.5rem;
        border: none;
        border-radius: 0.5rem 0.5rem 0 0;
        transition: all 0.3s ease;
    }

    .collection-tabs .nav-link.active {
        color: #4338ca;
        background-color: white;
        border-bottom: 3px solid #4338ca;
    }

    .collection-tabs .nav-link:hover:not(.active) {
        background-color: #f3f4f6;
    }

    .tab-content {
        background-color: white;
        border-radius: 0 0.5rem 0.5rem 0.5rem;
        padding: 1.5rem;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
    }

    /* Cards */
    .anime-card {
        position: relative;
        border-radius: 0.75rem;
        overflow: hidden;
        box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1);
        transition: all 0.3s ease;
    }

    .anime-card:hover {
        transform: translateY(-0.5rem);
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
    }

    .anime-card-img {
        height: 200px;
        object-fit: cover;
    }

    .anime-card-overlay {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: linear-gradient(to top, rgba(0, 0, 0, 0.8), transparent);
        opacity: 0;
        transition: opacity 0.3s ease;
    }

    .anime-card:hover .anime-card-overlay {
        opacity: 1;
    }

    .anime-card-actions {
        position: absolute;
        bottom: 1rem;
        left: 1rem;
        right: 1rem;
        display: flex;
        justify-content: space-between;
    }

    .action-btn {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        background-color: white;
        color: #4338ca;
        border: none;
        cursor: pointer;
        transition: all 0.2s ease;
    }

    .action-btn:hover {
        background-color: #4338ca;
        color: white;
        transform: scale(1.1);
    }

    .action-btn i {
        font-size: 1.25rem;
    }

    /* Empty State */
    .empty-state {
        text-align: center;
        padding: 2rem;
        color: #6b7280;
    }

    .empty-state i {
        font-size: 4rem;
        color: #d1d5db;
        margin-bottom: 1rem;
    }

    /* Recommendations */
    .recommendations {
        margin-top: 3rem;
        padding-top: 2rem;
        border-top: 1px solid #e5e7eb;
    }

    .recommendations-title {
        font-size: 1.5rem;
        font-weight: 600;
        margin-bottom: 1.5rem;
        color: #111827;
    }

    /* Animation */
    @@keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }

    .anime-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
        gap: 1.5rem;
    }

    .anime-grid > div {
        animation: fadeIn 0.5s ease forwards;
    }

    .anime-grid > div:nth-child(1) { animation-delay: 0.1s; }
    .anime-grid > div:nth-child(2) { animation-delay: 0.2s; }
    .anime-grid > div:nth-child(3) { animation-delay: 0.3s; }
    .anime-grid > div:nth-child(4) { animation-delay: 0.4s; }
    .anime-grid > div:nth-child(5) { animation-delay: 0.5s; }
    .anime-grid > div:nth-child(6) { animation-delay: 0.6s; }
    .anime-grid > div:nth-child(7) { animation-delay: 0.7s; }
    .anime-grid > div:nth-child(8) { animation-delay: 0.8s; }

    /* Loading Animation */
    .loading-spinner {
        display: inline-block;
        width: 50px;
        height: 50px;
        border: 3px solid rgba(99, 102, 241, 0.3);
        border-radius: 50%;
        border-top-color: #6366f1;
        animation: spin 1s ease-in-out infinite;
    }

    @@keyframes spin {
        to { transform: rotate(360deg); }
    }

    /* Toast notification */
    .toast-container {
        position: fixed;
        bottom: 2rem;
        right: 2rem;
        z-index: 1000;
    }

    .toast {
        padding: 1rem;
        border-radius: 0.5rem;
        background-color: white;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        margin-bottom: 1rem;
        display: flex;
        align-items: center;
        animation: slideIn 0.3s ease forwards;
    }

    @@keyframes slideIn {
        from { transform: translateX(100%); }
        to { transform: translateX(0); }
    }

    .toast-success {
        border-left: 4px solid #10b981;
    }

    .toast-error {
        border-left: 4px solid #ef4444;
    }

    .toast-icon {
        margin-right: 1rem;
        font-size: 1.25rem;
    }

    .toast-success .toast-icon {
        color: #10b981;
    }

    .toast-error .toast-icon {
        color: #ef4444;
    }

    .toast-content {
        flex-grow: 1;
    }

    .toast-title {
        font-weight: 600;
        margin-bottom: 0.25rem;
    }

    .toast-message {
        color: #6b7280;
        font-size: 0.875rem;
    }

    .toast-close {
        color: #9ca3af;
        background: none;
        border: none;
        cursor: pointer;
        font-size: 1.25rem;
    }

    .toast-close:hover {
        color: #4b5563;
    }
</style>

<!-- Profile Header -->
<div class="profile-header">
    <div class="container">
        <div class="d-flex align-items-center">
            <div class="me-4">
                <div class="bg-white text-indigo-600 rounded-circle d-flex align-items-center justify-content-center" style="width: 80px; height: 80px; font-size: 2rem;">
                    @Model.User.UserName.Substring(0, 1).ToUpper()
                </div>
            </div>
            <div>
                <h1 class="mb-2">@Model.User.UserName</h1>
                <p class="mb-0">
                    <span class="badge bg-white text-indigo-600 me-2">@Model.Watchlist.Count Shows in Watchlist</span>
                    <span class="badge bg-white text-indigo-600">@Model.LikedShows.Count Liked Shows</span>
                </p>
            </div>
        </div>
    </div>
</div>

<!-- Collections -->
<div class="container">
    <div class="collection-tabs">
        <ul class="nav nav-tabs" id="animeCollections" role="tablist">
            <li class="nav-item" role="presentation">
                <button class="nav-link active" id="watchlist-tab" data-bs-toggle="tab" data-bs-target="#watchlist" type="button" role="tab" aria-controls="watchlist" aria-selected="true">
                    <i class="bi bi-bookmark-fill me-2"></i> Watchlist
                </button>
            </li>
            <li class="nav-item" role="presentation">
                <button class="nav-link" id="liked-tab" data-bs-toggle="tab" data-bs-target="#liked" type="button" role="tab" aria-controls="liked" aria-selected="false">
                    <i class="bi bi-heart-fill me-2"></i> Liked Shows
                </button>
            </li>
        </ul>
        <div class="tab-content" id="animeCollectionsContent">
            <!-- Watchlist Tab -->
            <div class="tab-pane fade show active" id="watchlist" role="tabpanel" aria-labelledby="watchlist-tab">
                @if (Model.Watchlist.Count > 0)
                {
                    <div class="anime-grid">
                        @foreach (var show in Model.Watchlist)
                        {
                            <div class="anime-card" data-show-id="@show.Id">
                                <img src="@show.Image" class="anime-card-img w-100" alt="@show.Title">
                                <div class="anime-card-body p-3">
                                    <h5 class="anime-card-title text-truncate">@show.Title</h5>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="anime-card-genre badge bg-light text-dark">@show.Genre</div>
                                        <div class="anime-card-rating">
                                            <i class="bi bi-star-fill text-warning"></i>
                                            <span>@show.Rating</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="anime-card-overlay">
                                    <div class="anime-card-actions">
                                        <a href="/Anime/Detalle/@show.Id" class="action-btn" title="View Details">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        <button class="action-btn btn-remove-watchlist" data-show-id="@show.Id" title="Remove from Watchlist">
                                            <i class="bi bi-x-circle"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <i class="bi bi-bookmark"></i>
                        <h4>Your watchlist is empty</h4>
                        <p>Shows you want to watch will appear here</p>
                    </div>
                }
            </div>
            
            <!-- Liked Shows Tab -->
            <div class="tab-pane fade" id="liked" role="tabpanel" aria-labelledby="liked-tab">
                @if (Model.LikedShows.Count > 0)
                {
                    <div class="anime-grid">
                        @foreach (var show in Model.LikedShows)
                        {
                            <div class="anime-card" data-show-id="@show.Id">
                                <img src="@show.Image" class="anime-card-img w-100" alt="@show.Title">
                                <div class="anime-card-body p-3">
                                    <h5 class="anime-card-title text-truncate">@show.Title</h5>
                                    <div class="d-flex justify-content-between align-items-center">
                                        <div class="anime-card-genre badge bg-light text-dark">@show.Genre</div>
                                        <div class="anime-card-rating">
                                            <i class="bi bi-star-fill text-warning"></i>
                                            <span>@show.Rating</span>
                                        </div>
                                    </div>
                                </div>
                                <div class="anime-card-overlay">
                                    <div class="anime-card-actions">
                                        <a href="/Anime/Detalle/@show.Id" class="action-btn" title="View Details">
                                            <i class="bi bi-eye"></i>
                                        </a>
                                        <button class="action-btn btn-unlike" data-show-id="@show.Id" title="Unlike">
                                            <i class="bi bi-heart-fill"></i>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="empty-state">
                        <i class="bi bi-heart"></i>
                        <h4>You haven't liked any shows yet</h4>
                        <p>Shows you like will appear here</p>
                    </div>
                }
            </div>
        </div>
    </div>
    
    <!-- Recommendations Section -->
    <div class="recommendations">
        <h2 class="recommendations-title">Recommended For You</h2>
        <div id="recommendationsContainer" class="position-relative">
            <div class="text-center" id="recommendationsLoading">
                <div class="loading-spinner mb-3"></div>
                <p>Finding shows you might like...</p>
            </div>
            <div class="anime-grid" id="recommendationsGrid" style="display: none;"></div>
            <div class="empty-state" id="noRecommendations" style="display: none;">
                <i class="bi bi-film"></i>
                <h4>No recommendations available</h4>
                <p>Check back later for personalized recommendations</p>
            </div>
        </div>
    </div>
</div>

<!-- Toast Notifications Container -->
<div class="toast-container" id="toastContainer"></div>

<!-- Recommendation Card Template -->
<template id="recommendationCardTemplate">
    <div class="anime-card" data-show-id="">
        <img src="" class="anime-card-img w-100" alt="">
        <div class="anime-card-body p-3">
            <h5 class="anime-card-title text-truncate"></h5>
            <div class="d-flex justify-content-between align-items-center">
                <div class="anime-card-genre badge bg-light text-dark"></div>
                <div class="anime-card-rating">
                    <i class="bi bi-star-fill text-warning"></i>
                    <span></span>
                </div>
            </div>
        </div>
        <div class="anime-card-overlay">
            <div class="anime-card-actions">
                <a href="" class="action-btn" title="View Details">
                    <i class="bi bi-eye"></i>
                </a>
                <button class="action-btn btn-add-watchlist" data-show-id="" title="Add to Watchlist">
                    <i class="bi bi-bookmark-plus"></i>
                </button>
                <button class="action-btn btn-like" data-show-id="" title="Like">
                    <i class="bi bi-heart"></i>
                </button>
            </div>
        </div>
    </div>
</template>

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            // Load recommendations
            loadRecommendations();
            
            // Setup event handlers for watchlist removal
            document.querySelectorAll('.btn-remove-watchlist').forEach(button => {
                button.addEventListener('click', function() {
                    const showId = this.getAttribute('data-show-id');
                    removeFromWatchlist(showId);
                });
            });
            
            // Setup event handlers for unlike
            document.querySelectorAll('.btn-unlike').forEach(button => {
                button.addEventListener('click', function() {
                    const showId = this.getAttribute('data-show-id');
                    unlikeShow(showId);
                });
            });
        });
        
        // Load recommendations based on user's liked shows
        function loadRecommendations() {
            const likedShows = @Json.Serialize(Model.LikedShows.Select(s => s.Id));
            if (likedShows.length === 0) {
                // If no liked shows, try recommendations based on watchlist
                const watchlistShows = @Json.Serialize(Model.Watchlist.Select(s => s.Id));
                if (watchlistShows.length === 0) {
                    // If both are empty, show no recommendations message
                    document.getElementById('recommendationsLoading').style.display = 'none';
                    document.getElementById('noRecommendations').style.display = 'block';
                    return;
                }
                
                // Get recommendations based on first show in watchlist
                getRelatedShows(watchlistShows[0]);
            } else {
                // Get recommendations based on first liked show
                getRelatedShows(likedShows[0]);
            }
        }
        
        // Get related shows from the API
        function getRelatedShows(showId) {
            fetch(`/Anime/Related/${showId}`)
                .then(response => response.json())
                .then(shows => {
                    document.getElementById('recommendationsLoading').style.display = 'none';
                    
                    if (shows.length === 0) {
                        document.getElementById('noRecommendations').style.display = 'block';
                        return;
                    }
                    
                    const grid = document.getElementById('recommendationsGrid');
                    grid.style.display = 'grid';
                    
                    // Filter out shows that are already in watchlist or liked
                    const watchlistIds = @Json.Serialize(Model.Watchlist.Select(s => s.Id));
                    const likedIds = @Json.Serialize(Model.LikedShows.Select(s => s.Id));
                    
                    const filteredShows = shows.filter(show => 
                        !watchlistIds.includes(show.id) && !likedIds.includes(show.id)
                    );
                    
                    if (filteredShows.length === 0) {
                        document.getElementById('noRecommendations').style.display = 'block';
                        return;
                    }
                    
                    // Display up to 8 recommendations
                    const showsToDisplay = filteredShows.slice(0, 8);
                    showsToDisplay.forEach((show, index) => {
                        const card = createRecommendationCard(show, index);
                        grid.appendChild(card);
                    });
                })
                .catch(error => {
                    console.error('Error loading recommendations:', error);
                    document.getElementById('recommendationsLoading').style.display = 'none';
                    document.getElementById('noRecommendations').style.display = 'block';
                });
        }
        
        // Create a recommendation card from template
        function createRecommendationCard(show, index) {
            const template = document.getElementById('recommendationCardTemplate');
            const card = template.content.cloneNode(true);
            
            // Set card data
            const cardElement = card.querySelector('.anime-card');
            cardElement.style.animationDelay = `${0.1 * (index + 1)}s`;
            cardElement.setAttribute('data-show-id', show.id);
            
            const img = card.querySelector('.anime-card-img');
            img.src = show.image;
            img.alt = show.title;
            
            card.querySelector('.anime-card-title').textContent = show.title;
            card.querySelector('.anime-card-genre').textContent = show.genre;
            card.querySelector('.anime-card-rating span').textContent = show.rating;
            
            const detailsLink = card.querySelector('a.action-btn');
            detailsLink.href = `/Anime/Detalle/${show.id}`;
            
            const watchlistBtn = card.querySelector('.btn-add-watchlist');
            watchlistBtn.setAttribute('data-show-id', show.id);
            watchlistBtn.addEventListener('click', function() {
                addToWatchlist(show.id);
            });
            
            const likeBtn = card.querySelector('.btn-like');
            likeBtn.setAttribute('data-show-id', show.id);
            likeBtn.addEventListener('click', function() {
                likeShow(show.id);
            });
            
            return card;
        }
        
        // Remove a show from watchlist
        function removeFromWatchlist(showId) {
            fetch(`/Anime/RemoveFromWatchlist/${showId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Remove the card with animation
                        const card = document.querySelector(`#watchlist .anime-card[data-show-id="${showId}"]`);
                        if (card) {
                            card.style.opacity = '0';
                            card.style.transform = 'scale(0.8)';
                            card.style.transition = 'all 0.3s ease';
                            
                            setTimeout(() => {
                                card.remove();
                                
                                // If there are no more cards, show empty state
                                const remainingCards = document.querySelectorAll('#watchlist .anime-card');
                                if (remainingCards.length === 0) {
                                    const emptyState = document.createElement('div');
                                    emptyState.className = 'empty-state';
                                    emptyState.innerHTML = `
                                        <i class="bi bi-bookmark"></i>
                                        <h4>Your watchlist is empty</h4>
                                        <p>Shows you want to watch will appear here</p>
                                    `;
                                    document.querySelector('#watchlist .anime-grid').replaceWith(emptyState);
                                }
                            }, 300);
                        }
                        
                        // Show success toast
                        showToast('Success', 'Show removed from watchlist', 'success');
                    }
                })
                .catch(error => {
                    console.error('Error removing from watchlist:', error);
                    showToast('Error', 'Failed to remove show from watchlist', 'error');
                });
        }
        
        // Unlike a show
        function unlikeShow(showId) {
            fetch(`/Anime/Unlike/${showId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Remove the card with animation
                        const card = document.querySelector(`#liked .anime-card[data-show-id="${showId}"]`);
                        if (card) {
                            card.style.opacity = '0';
                            card.style.transform = 'scale(0.8)';
                            card.style.transition = 'all 0.3s ease';
                            
                            setTimeout(() => {
                                card.remove();
                                
                                // If there are no more cards, show empty state
                                const remainingCards = document.querySelectorAll('#liked .anime-card');
                                if (remainingCards.length === 0) {
                                    const emptyState = document.createElement('div');
                                    emptyState.className = 'empty-state';
                                    emptyState.innerHTML = `
                                        <i class="bi bi-heart"></i>
                                        <h4>You haven't liked any shows yet</h4>
                                        <p>Shows you like will appear here</p>
                                    `;
                                    document.querySelector('#liked .anime-grid').replaceWith(emptyState);
                                }
                            }, 300);
                        }
                        
                        // Show success toast
                        showToast('Success', 'Show unliked', 'success');
                    }
                })
                .catch(error => {
                    console.error('Error unliking show:', error);
                    showToast('Error', 'Failed to unlike show', 'error');
                });
        }
        
        // Add show to watchlist
        function addToWatchlist(showId) {
            fetch(`/Anime/AddToWatchlist/${showId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Refresh the page or update UI - here we'll get the show details and add to watchlist
                        fetch(`/Anime/Detalle/${showId}`)
                            .then(response => window.location.reload()) // Simple refresh for now
                            .catch(error => console.error('Error fetching show details:', error));
                        
                        showToast('Success', 'Show added to watchlist', 'success');
                    }
                })
                .catch(error => {
                    console.error('Error adding to watchlist:', error);
                    showToast('Error', 'Failed to add show to watchlist', 'error');
                });
        }
        
        // Like a show
        function likeShow(showId) {
            fetch(`/Anime/Like/${showId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        // Refresh the page or update UI
                        window.location.reload();
                        
                        showToast('Success', 'Show liked', 'success');
                    }
                })
                .catch(error => {
                    console.error('Error liking show:', error);
                    showToast('Error', 'Failed to like show', 'error');
                });
        }
        
        // Show toast notification
        function showToast(title, message, type = 'success') {
            const toastContainer = document.getElementById('toastContainer');
            
            const toast = document.createElement('div');
            toast.className = `toast ${type === 'success' ? 'toast-success' : 'toast-error'} mb-3`;
            
            toast.innerHTML = `
                <div class="toast-icon">
                    <i class="bi ${type === 'success' ? 'bi-check-circle-fill' : 'bi-exclamation-circle-fill'}"></i>
                </div>
                <div class="toast-content">
                    <div class="toast-title">${title}</div>
                    <div class="toast-message">${message}</div>
                </div>
                <button class="toast-close" onclick="this.parentElement.remove()">
                    <i class="bi bi-x"></i>
                </button>
            `;
            
            toastContainer.appendChild(toast);
            
            // Auto remove after 5 seconds
            setTimeout(() => {
                toast.style.opacity = '0';
                toast.style.transform = 'translateX(100%)';
                toast.style.transition = 'all 0.3s ease';
                
                setTimeout(() => {
                    toast.remove();
                }, 300);
            }, 5000);
        }
    </script>
}
